import type { SQLiteDatabase } from 'expo-sqlite';
import { CREATE_TABLES } from './schema';

// Version actuelle de la base de donn√©es
const CURRENT_DB_VERSION = 1;

/**
 * R√©cup√®re la version actuelle de la base de donn√©es
 */
async function getCurrentVersion(db: SQLiteDatabase): Promise<number> {
  try {
    // Cr√©er la table de version si elle n'existe pas
    await db.execAsync(`
      CREATE TABLE IF NOT EXISTS db_version (
        version INTEGER PRIMARY KEY,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      );
    `);

    const result = await db.getFirstAsync<{ version: number }>(
      'SELECT version FROM db_version ORDER BY version DESC LIMIT 1'
    );

    return result?.version || 0;
  } catch (error) {
    console.error('Error getting database version:', error);
    return 0;
  }
}

/**
 * Met √† jour la version de la base de donn√©es
 */
async function updateVersion(db: SQLiteDatabase, version: number): Promise<void> {
  await db.runAsync(
    'INSERT INTO db_version (version) VALUES (?)',
    [version]
  );
}

/**
 * Migration v0 -> v1 : Cr√©ation initiale des tables
 */
async function migrateToV1(db: SQLiteDatabase): Promise<void> {
  console.log('üì¶ Running migration v0 -> v1...');
  
  // Cr√©er toutes les tables
  await db.execAsync(CREATE_TABLES);
  
  console.log('‚úÖ Migration v1 completed');
}

/**
 * Ex√©cute toutes les migrations n√©cessaires
 */
export async function runMigrations(db: SQLiteDatabase): Promise<void> {
  try {
    const currentVersion = await getCurrentVersion(db);
    console.log(`üìä Current database version: ${currentVersion}`);

    // Si d√©j√† √† jour, ne rien faire
    if (currentVersion >= CURRENT_DB_VERSION) {
      console.log('‚úÖ Database is up to date');
      return;
    }

    // Ex√©cuter les migrations dans l'ordre
    if (currentVersion < 1) {
      await migrateToV1(db);
      await updateVersion(db, 1);
    }

    // Ajouter ici les futures migrations :
    // if (currentVersion < 2) {
    //   await migrateToV2(db);
    //   await updateVersion(db, 2);
    // }

    console.log(`‚úÖ Database migrated to version ${CURRENT_DB_VERSION}`);
  } catch (error) {
    console.error('‚ùå Migration failed:', error);
    throw error;
  }
}
